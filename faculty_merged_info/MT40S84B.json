{
    "columns":[
        "id",
        "google_scholar_id",
        "titles",
        "abstracts",
        "interests"
    ],
    "index":[
        0
    ],
    "data":[
        [
            "MT40S84B",
            "80pKMyMAAAAJ",
            [
                "Object-oriented modeling and design",
                "Theory of relational databases",
                "Stackguard: automatic adaptive detection and prevention of buffer-overflow attacks.",
                "The object-oriented database system manifesto",
                "Magic sets and other strange ways to implement logic programs",
                "From databases to dataspaces: a new abstraction for information management",
                "On the desirability of acyclic database schemes",
                "The complexity of some problems on subsequences and supersequences",
                "Development of an object-oriented DBMS",
                "Testing implications of data dependencies"
            ],
            [
                "1.1 What Is Object-Oriented?, 1 1.2 What Is Object-Oriented Development?, 4 1.3 Object-Oriented \nThemes, 7 1.4 Evidence for Usefulness of Object-Oriented Development, 9 1.5 Organization \nof this Book, 10 Bibliographic Notes, 12 References, 12 Exercises, 13 \u2026 Part 1: Modeling Concepts \nCHAPTER 2 MODELING AS A DESIGN TECHNIQUE \u2026 2.1 Modeling, 15 2.2 The Object Modeling \nTechnique, 16 2.3 Chapter Summary, 19 Exercises, 19 CHAPTER 3 OBJECT MODELING \u2026 \n3.1 Objects and Classes, 21 3.2 Links and Associations, 27 3.3 Advanced Link and Association \nConcepts, 31 3.4 Generalization and Inheritance, 38 3.5 Grouping Constructs, 43 - 3.6 A Sample \nObject Model, 43 3.7 Practical Tips, 46 \u2026 3.8 Chapter Summary, 47 Bibliographic Notes, 48 \nReferences, 48 Exercises, 49 CHAPTER 4 ADVANCED OBJECT MODELING \u2026 4.1 \nAggregation, 57 4.2 Abstract Classes, 61 4.3 Generalization as Extension and \u2026 ",
                "[Aho et al. 1979] Alfred V. Aho, Catriel Beeri, Jeffrey D. Ullman: The Theory of Joins in Relational \nDatabases. ACM Trans. Database Syst. 4(3): 297-314(1979) BibTeX [Aho et al. 1974] Alfred \nV. Aho, John E. Hopcroft, Jeffrey D. Ullman: The Design and Analysis of Computer \nAlgorithms. Addison-Wesley 1974, ISBN 0-201-00029-6 BibTeX [Aho et al. 1979] Alfred V. \nAho, Yehoshua Sagiv, Thomas G. Szymanski, Jeffrey D. Ullman: Inferring a Tree from Lowest \nCommon Ancestors with an Application to the Optimization of Relational Expressions. SIAM \nJ. Comput. 10(3): 405-421(1981) BibTeX [Aho et al. 1979a] Alfred V. Aho, Yehoshua Sagiv, Jeffrey \nD. Ullman: Efficient Optimization of a Class of Relational Expressions. ACM Trans. Database \nSyst. 4(4): 435-454(1979) BibTeX [Aho et al \u2026  ",
                "This paper presents a systematic solution to the persistent problem of buffer overflow attacks. Buffer overflow attacks gained notoriety in 1988 as part of the Morris Worm incident on the Internet. While it is fairly simple to fix individual buffer overflow vulnerabilities, buffer overflow attacks continue to this day. Hundreds of attacks have been discovered, and while most of the obvious vulnerabilities have now been patched, more sophisticated buffer overflow attacks continue to emerge.We describe StackGuard: a simple compiler technique that virtually eliminates buffer overflow vulnerabilities with only modest performance penalties. Privileged programs that are recompiled with the StackGuard compiler extension no longer yield control to the attacker, but rather enter a fail-safe state. These programs require no source code changes at all, and are binary-compatible with existing operating systems and libraries. We \u2026",
                "This paper attempts to define an object-oriented database system. It describes the main features and characteristics that a system must have to qualify as an object-oriented database system.We have separated these characteristics into three groups: \u2022Mandatory, the ones the system must satisfy in order to be termed an object-oriented database system. These are complex objects, object identity, encapsulation, types or classes, inheritance, overriding combined with late binding, extensibility, computational completeness, persistence, secondary storage management, concurrency, recovery and an ad hoc query facility.\u2022Optional, the ones that can be added to make the system better, but which are not mandatory. These are multiple inheritance, type checking and inferencing, distribution, design transactions and versions.\u2022Open, the points where the designer can make a number of choices. These are the programming \u2026Mandatory, the ones the system must satisfy in order to be termed an object-oriented database system. These are complex objects, object identity, encapsulation, types or classes, inheritance, overriding combined with late binding, extensibility, computational completeness, persistence, secondary storage management, concurrency, recovery and an ad hoc query facility.Optional, the ones that can be added to make the system better, but which are not mandatory. These are multiple inheritance, type checking and inferencing, distribution, design transactions and versions.Open, the points where the designer can make a number of choices. These are the programming \u2026",
                "Several methods for implementing database queries expressed as logical rules are given and they are compared for efficiency. One method, called \u201cmagic sets,\u201d is a general algorithm for rewriting logical rules so that they may be implemented bottom-UP (= forward chaining) in a way that cuts down on the irrelevant facts that are generated. The advantage of this scheme is that by working bottom-up, we can take advantage of efficient methods for doing massive joins. Two other methods are ad hoc ways of implementing \u201clinear\u201d rules, ie, rules where at most one predicate in any body is recursive. These methods are",
                "The development of relational database management systems served to focus the data management community for decades, with spectacular results. In recent years, however, the rapidly-expanding demands of \"data everywhere\" have led to a field comprised of interesting and productive efforts, but without a central focus or coordinated agenda. The most acute information management challenges today stem from organizations (e.g., enterprises, government agencies, libraries, \"smart\" homes) relying on a large number of diverse, interrelated data sources, but having no way to manage their dataspaces in a convenient, integrated, or principled fashion. This paper proposes dataspaces and their support systems as a new agenda for data management. This agenda encompasses much of the work going on in data management today, while posing additional research objectives.",
                "A class of database schemes, called acychc, was recently introduced. It is shown that this class has a number of desirable properties. In particular, several desirable properties that have been studied by other researchers m very different terms are all shown to be eqmvalent to acydicity. In addition, several equivalent charactenzauons of the class m terms of graphs and hypergraphs are given, and a smaple algorithm for determining acychclty is presented. Also given are several eqmvalent characterizations of those sets M of multivalued dependencies such that M is the set of muRlvalued dependencies that are the consequences of a given join dependency. Several characterizations for a conflict-free (in the sense of Lien) set of muluvalued dependencies are provided.",
                "The complexity of finding the Longest Common Subsequence (LCS) and the Shortest Common Supersequence (SCS) of an arbRrary number of sequences IS considered We show that the yes\/no version of the LCS problem is NP-complete for sequences over an alphabet of size 2, and that the yes\/no SCS problem is NP-complete for sequences over an alphabet of size 5",
                "We describe the results of developing the GemStone object-oriented database server, which supports a model of objects similar to that of Smalltalk-80. We begin with a summary of the goals and requirements for the system: an extensible data model that captures behavioral semantics, no artificial bounds on the number or size of database objects, database amenities (concurrency, transactions, recovery, associative access, authorization) and an interactive development environment. Object-oriented languages, Smalltalk in particular, answer some of these requirements. We discuss satisfying the remaining requirements in an object oriented context, and report briefly on the status of the development efforts. This paper is directed at an audience familiar with object-oriented languages and their implementation, but perhaps unacquainted with the difficulties and techniques of database system development. It updates \u2026",
                "Presented is a computation method\u2014the chase\u2014for testing implication of data dependencies by a set of data dependencies. The chase operates on tableaux similar to those of Aho, Sagiv, and Ullman. The chase includes previous tableau computation methods as special cases. By interpreting tableaux alternately as mappings or as templates for relations, it is possible to test implication of join dependencies (including multivalued dependencies) and functional dependencies by a set of dependencies."
            ],
            [
                [
                    "Database Systems"
                ]
            ]
        ]
    ]
}