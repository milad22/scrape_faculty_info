{
    "columns":[
        "abstract",
        "title",
        "author",
        "pub_year",
        "author_pub_id",
        "num_citations",
        "pub_url",
        "cites_id",
        "citedby_url",
        "cites_per_year"
    ],
    "index":[
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
    ],
    "data":[
        [
            "A user interface software tool helps developers design and implement the user interface. Research on past tools has had enormous impact on today's developers\u2014virtually all applications today are built using some form of user interface tool. In this article, we consider cases of both success and failure in past user interface tools. From these cases we extract a set of themes which can serve as lessons for future work. Using these themes, past tools can be characterized by what aspects of the user interface they addressed, their threshold and ceiling, what path of least resistance they offer, how predictable they are to use, and whether they addressed a target that became irrelevant. We believe the lessons of these past themes are particularly important now, because increasingly  rapid technological changes are likely to significantly change user interfaces. We are at the dawn of an era where user interfaces are about \u2026",
            "Past, present, and future of user interface software tools",
            "Brad Myers and Scott E Hudson and Randy Pausch",
            "2000",
            "E1cp_aYAAAAJ:u-x6o8ySG0sC",
            976,
            "https:\/\/dl.acm.org\/doi\/abs\/10.1145\/344949.344959",
            "16483454776531247316",
            "\/scholar?cites=16483454776531247316",
            {
                "2000":6,
                "2001":32,
                "2002":38,
                "2003":41,
                "2004":57,
                "2005":54,
                "2006":55,
                "2007":50,
                "2008":56,
                "2009":47,
                "2010":71,
                "2011":55,
                "2012":54,
                "2013":50,
                "2014":41,
                "2015":50,
                "2016":32,
                "2017":62,
                "2018":41,
                "2019":41,
                "2020":31,
                "2021":2
            }
        ],
        [
            "Figure 1 shows the time span for some of the technologies discussed in this article. including when they were introduced. Of course, a deeper analysis would reveal significant interaction among the university, corporate research, and commercial activity lines. It is important to appreciate that years of research are involved in creating and making these technologies ready for widespread use. The same will be true for the HCI technologies currently being developed that will provide the interfaces of tomorrow. Clearly it is impossible to list every system and source in a paper of this scope, but I have tried to represent the earliest and most influential systems. Further information can be found in other surveys of HCI topics (see, for example,[1, 11, 36, 41]). Another useful resource is the video All The Widgets, which shows the historical progression of a number of user interface ideas [27]. The technologies discussed in this \u2026",
            "A brief history of human-computer interaction technology",
            "Brad A Myers",
            "1998",
            "E1cp_aYAAAAJ:Tyk-4Ss8FVUC",
            832,
            "https:\/\/dl.acm.org\/doi\/abs\/10.1145\/274430.274436",
            "13696696640453311326",
            "\/scholar?cites=13696696640453311326",
            {
                "1998":3,
                "1999":11,
                "2000":14,
                "2001":22,
                "2002":23,
                "2003":36,
                "2004":36,
                "2005":30,
                "2006":27,
                "2007":37,
                "2008":35,
                "2009":50,
                "2010":54,
                "2011":55,
                "2012":54,
                "2013":48,
                "2014":42,
                "2015":44,
                "2016":34,
                "2017":48,
                "2018":44,
                "2019":36,
                "2020":23
            }
        ],
        [
            "Two experiments were run to investigate two-handed input. The experimental tasks were representative of those found in CAD and office information systems.Experiment one involved the performance of a compound selection\/positioning task. The two sub-tasks were performed by different hands using separate transducers. Without prompting, novice subjects adopted strategies that involved performing the two sub-tasks simultaneously. We interpret this as a demonstration that, in the appropriate context, users are capable of simultaneously providing continuous data from two hands without significant overhead. The results also show that the speed of performing the task was strongly correlated to the degree of parallelism employed.Experiment two involved the performance of a compound navigation\/selection task. It compared a one-handed versus two-handed method for finding and selecting words in a document \u2026",
            "A study in two-handed input",
            "William Buxton and Brad Myers",
            "1986",
            "E1cp_aYAAAAJ:9yKSN-GCB0IC",
            767,
            "https:\/\/dl.acm.org\/doi\/abs\/10.1145\/22339.22390",
            "4119739949087095276",
            "\/scholar?cites=4119739949087095276",
            {
                "1986":4,
                "1987":5,
                "1988":8,
                "1989":3,
                "1990":6,
                "1991":6,
                "1992":7,
                "1993":7,
                "1994":14,
                "1995":8,
                "1996":13,
                "1997":24,
                "1998":19,
                "1999":24,
                "2000":16,
                "2001":16,
                "2002":21,
                "2003":21,
                "2004":42,
                "2005":36,
                "2006":22,
                "2007":45,
                "2008":37,
                "2009":38,
                "2010":37,
                "2011":29,
                "2012":38,
                "2013":46,
                "2014":44,
                "2015":23,
                "2016":34,
                "2017":17,
                "2018":12,
                "2019":20,
                "2020":11,
                "2021":1
            }
        ],
        [
            "There has been great interest recently in systems that use graphics to aid in the programming, debugging, and understanding of computer systems. The terms \u2018Visual Programming\u2019 and \u2018Program Visualization\u2019 have been applied to these systems. This paper attempts to provide more meaning to these terms by giving precise definitions, and then surveys a number of systems that can be classified as providing Visual Programming or Program Visualization. These systems are organized by classifying them into three different taxonomies.",
            "Taxonomies of visual programming and program visualization",
            "Brad A Myers",
            "1990",
            "E1cp_aYAAAAJ:qjMakFHDy7sC",
            704,
            "https:\/\/www.sciencedirect.com\/science\/article\/pii\/S1045926X05800369",
            "17154539420615338685",
            "\/scholar?cites=17154539420615338685",
            {
                "1990":6,
                "1991":21,
                "1992":27,
                "1993":34,
                "1994":32,
                "1995":29,
                "1996":28,
                "1997":16,
                "1998":21,
                "1999":18,
                "2000":21,
                "2001":18,
                "2002":31,
                "2003":15,
                "2004":17,
                "2005":19,
                "2006":25,
                "2007":16,
                "2008":15,
                "2009":13,
                "2010":16,
                "2011":16,
                "2012":19,
                "2013":21,
                "2014":28,
                "2015":23,
                "2016":41,
                "2017":24,
                "2018":26,
                "2019":32,
                "2020":21,
                "2021":3
            }
        ],
        [
            "This paper reports on the results of a survey of user interface programming. The survey was widely distributed, and we received 74 responses. The results show that in today's applications, an average of 48% of the code is devoted to the user interface portion. The average time spent on the user interface portion is 45% during the design phase, 50% during the implementation phase, and 37% during the maintenance phase. 34% of the systems were implemented using a toolkit, 27% used a UIMS, 14% used an interface builder, and 26% used no tools. This appears to be because the toolkit systems had more sophisticated user interfaces. The projects using UIMSs or interface builders spent the least percent of time and code on the user interface (around 41%) suggesting that these tools are effective. In general, people were happy with the tools they used, especially the graphical interface builders. The most common \u2026",
            "Survey on user interface programming",
            "Brad A Myers and Mary Beth Rosson",
            "1992",
            "E1cp_aYAAAAJ:UeHWp8X0CEIC",
            663,
            "https:\/\/dl.acm.org\/doi\/abs\/10.1145\/142750.142789",
            "4685139532616295677",
            "\/scholar?cites=4685139532616295677",
            {
                "1992":9,
                "1993":21,
                "1994":23,
                "1995":26,
                "1996":26,
                "1997":21,
                "1998":17,
                "1999":13,
                "2000":29,
                "2001":20,
                "2002":20,
                "2003":27,
                "2004":33,
                "2005":26,
                "2006":26,
                "2007":25,
                "2008":26,
                "2009":32,
                "2010":32,
                "2011":26,
                "2012":23,
                "2013":28,
                "2014":25,
                "2015":20,
                "2016":20,
                "2017":10,
                "2018":15,
                "2019":16,
                "2020":12,
                "2021":4
            }
        ],
        [
            "Researchers at University of California, Berkeley and Carnegie Mellon University have designed, implemented, and evaluated SILK (Sketching Interfaces Like Krazy), an informal sketching tool that combines many of the benefits of paper-based sketching with the merits of current electronic tools. With SILK, designers can quickly sketch an interface using an electronic pad and stylus, and SILK recognizes widgets and other interface elements as the designer draws them. Unlike paper-based sketching, however, designers can exercise these elements in their sketchy state. For example, a sketched scroll-bar is likely to contain an elevator or thumbnail, the small rectangle a user drags with a mouse. In a paper sketch, the elevator would just sit there, but in a SILK sketch, designers can drag it up and down, which lets them test component or widget behavior. SILK also supports the creation of storyboards-the arrangement \u2026",
            "Sketching interfaces: Toward more human interface design",
            "James A Landay and Brad A Myers",
            "2001",
            "E1cp_aYAAAAJ:2osOgNQ5qMEC",
            660,
            "https:\/\/ieeexplore.ieee.org\/abstract\/document\/910894\/",
            "13366593035961632652",
            "\/scholar?cites=13366593035961632652",
            {
                "2000":2,
                "2001":20,
                "2002":34,
                "2003":39,
                "2004":49,
                "2005":54,
                "2006":57,
                "2007":70,
                "2008":64,
                "2009":36,
                "2010":30,
                "2011":28,
                "2012":17,
                "2013":31,
                "2014":21,
                "2015":19,
                "2016":15,
                "2017":12,
                "2018":22,
                "2019":15,
                "2020":14
            }
        ],
        [
            "Much of software developers' time is spent understanding unfamiliar code. To better understand how developers gain this understanding and how software development environments might be involved, a study was performed in which developers were given an unfamiliar program and asked to work on two debugging tasks and three enhancement tasks for 70 minutes. The study found that developers interleaved three activities. They began by searching for relevant code both manually and using search tools; however, they based their searches on limited and misrepresentative cues in the code, environment, and executing program, often leading to failed searches. When developers found relevant code, they followed its incoming and outgoing dependencies, often returning to it and navigating its other dependencies; while doing so, however, Eclipse's navigational tools caused significant overhead. Developers \u2026",
            "An exploratory study of how developers seek, relate, and collect relevant information during software maintenance tasks",
            "Andrew J Ko and Brad A Myers and Michael J Coblenz and Htet Htet Aung",
            "2006",
            "E1cp_aYAAAAJ:Zph67rFs4hoC",
            650,
            "https:\/\/ieeexplore.ieee.org\/abstract\/document\/4016573\/",
            "5849300374543320419",
            "\/scholar?cites=5849300374543320419",
            {
                "2005":3,
                "2006":7,
                "2007":16,
                "2008":29,
                "2009":16,
                "2010":29,
                "2011":31,
                "2012":43,
                "2013":59,
                "2014":68,
                "2015":60,
                "2016":60,
                "2017":64,
                "2018":50,
                "2019":56,
                "2020":38,
                "2021":1
            }
        ],
        [
            "This chapter presents an overview of Garnet research project which attempts to create a comprehensive support for graphical, highly interactive user interfaces. User interface software is difficult and expensive to implement. Highly interactive interfaces are among the hardest to create, because they must handle at least two asynchronous input devices, real time feedback, multiple windows, and elaborate dynamic graphics. The Garnet research project is creating a set of tools to aid the design and implementation of highly interactive, graphical, direct manipulation user interfaces. Garnet also helps designers rapidly prototype different interfaces and explore various user interface metaphors during early product design. A number of features differentiate Garnet from other user interface tools, including an emphasis on handling objects' runtime behavior and on handling all visual aspects of a program \u2026",
            "GARNET comprehensive support for graphical, highly interactive user interfaces",
            "Brad A Myers and Dario A Giuse and Roger B Dannenberg and Brad Vander Zanden and David S Kosbie and Edward Pervin and Andrew Mickish and Philippe Marchal",
            "1995",
            "E1cp_aYAAAAJ:u5HHmVD_uO8C",
            644,
            "https:\/\/www.sciencedirect.com\/science\/article\/pii\/B9780080515748500376",
            "3745737510486439127",
            "\/scholar?cites=3745737510486439127",
            {
                "1990":4,
                "1991":24,
                "1992":50,
                "1993":51,
                "1994":59,
                "1995":62,
                "1996":63,
                "1997":33,
                "1998":52,
                "1999":22,
                "2000":16,
                "2001":24,
                "2002":22,
                "2003":15,
                "2004":17,
                "2005":11,
                "2006":10,
                "2007":11,
                "2008":12,
                "2009":8,
                "2010":1,
                "2011":5,
                "2012":7,
                "2013":5,
                "2014":9,
                "2015":6,
                "2016":9,
                "2017":2,
                "2018":6,
                "2019":5,
                "2020":4,
                "2021":2
            }
        ],
        [
            "Current interactive user interface construction tools are often more of a hindrance than a benefit during the early stages of user interface design. These tools take too much time to use and force designers to specify more of the design details than they wish at this early stage. Most interface designers, especially those who have a background in graphic design, prefer to sketch early interface ideas on paper or on a whiteboard. We are developing an interactive tool called SILK that allows designers to quickly sketch an interface using an electronic pad and stylus. SILK preserves the important properties of pencil and paper: a rough drawing can be produced very quickly and the medium is very flexible. However, unlike a paper sketch, this electronic sketch is interactive and can easily be modified. In addition, our system allows designers to examine, annotate, and edit a complete history of the design. When the designer \u2026",
            "Interactive sketching for the early stages of user interface design",
            "James A Landay and Brad A Myers",
            "1995",
            "E1cp_aYAAAAJ:d1gkVwhDpl0C",
            637,
            "https:\/\/dl.acm.org\/doi\/fullHtml\/10.1145\/223904.223910",
            "1253504380182954771",
            "\/scholar?cites=1253504380182954771",
            {
                "1995":6,
                "1996":16,
                "1997":13,
                "1998":17,
                "1999":13,
                "2000":26,
                "2001":20,
                "2002":29,
                "2003":31,
                "2004":50,
                "2005":35,
                "2006":32,
                "2007":35,
                "2008":27,
                "2009":37,
                "2010":33,
                "2011":32,
                "2012":21,
                "2013":22,
                "2014":25,
                "2015":13,
                "2016":9,
                "2017":19,
                "2018":23,
                "2019":19,
                "2020":17
            }
        ],
        [
            "Most programs today are written not by professional software developers, but by people with expertise in other domains working towards goals for which they need computational support. For example, a teacher might write a grading spreadsheet to save time grading, or an interaction designer might use an interface builder to test some user interface design ideas. Although these end-user programmers may not have the same goals as professional developers, they do face many of the same software engineering challenges, including understanding their requirements, as well as making decisions about design, reuse, integration, testing, and debugging. This article summarizes and classifies research on these activities, defining the area of End-User Software Engineering (EUSE) and related terminology. The article then discusses empirical research about end-user software engineering activities and the \u2026",
            "The state of the art in end-user software engineering",
            "Andrew J Ko and Robin Abraham and Laura Beckwith and Alan Blackwell and Margaret Burnett and Martin Erwig and Chris Scaffidi and Joseph Lawrance and Henry Lieberman and Brad Myers and Mary Beth Rosson and Gregg Rothermel and Mary Shaw and Susan Wiedenbeck",
            "2011",
            "E1cp_aYAAAAJ:g5m5HwL7SMYC",
            598,
            "https:\/\/dl.acm.org\/doi\/abs\/10.1145\/1922649.1922658",
            "5556567274419057435",
            "\/scholar?cites=5556567274419057435",
            {
                "2010":16,
                "2011":26,
                "2012":43,
                "2013":71,
                "2014":70,
                "2015":90,
                "2016":54,
                "2017":61,
                "2018":50,
                "2019":47,
                "2020":55,
                "2021":4
            }
        ]
    ]
}