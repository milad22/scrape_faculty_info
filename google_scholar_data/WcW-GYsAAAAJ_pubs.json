{
    "columns":[
        "abstract",
        "title",
        "author",
        "pub_year",
        "author_pub_id",
        "num_citations",
        "pub_url",
        "cites_id",
        "citedby_url",
        "cites_per_year"
    ],
    "index":[
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
    ],
    "data":[
        [
            "There are many reasons for serving up dynamic content from a web site: to offer an online shopping site, create customized information pages for users, or just manage a large volume of content through a database. Anyone with a modest knowledge of HTML and web site management can learn to create dynamic content through the PHP programming language and the MySQL database. This book gives you the background and tools to do the job safely and reliably. Web Database Applications with PHP and MySQL, Second Edition thoroughly reflects the needs of real-world applications. It goes into detail on such practical issues as validating input (do you know what a proper credit card number looks like?), logging in users, and using templatesto give your dynamic web pages a standard look. But this book goes even further. It shows how JavaScript and PHP can be used in tandem to make a user's experience faster and more pleasant. It shows the correct way to handle errors in user input so that a site looks professional. It introduces the vast collection of powerful tools available in the PEAR repository and shows how to use some of the most popular tools. Even while it serves as an introduction to new programmers, the book does not omit critical tasks that web sites require. For instance, every site that allows updates must handle the possibility of multiple users accessing data at the same time. This book explains how to solve the problem in detail with locking. Through a sophisticated sample application--Hugh and Dave's Wine Store--all the important techniques of dynamic content are introduced. Good design is emphasized, such as dividing \u2026",
            "Web Database Applications with PHP and MySQL: Building Effective Database-Driven Web Sites",
            "Hugh E Williams and David Lane",
            "2004",
            "WcW-GYsAAAAJ:pyW8ca7W8N0C",
            369,
            "http:\/\/books.google.com\/books?hl=en&lr=&id=WuxxvP7RZasC&oi=fnd&pg=PT9&dq=info:blFdpWA6_KIJ:scholar.google.com&ots=CHa8svZXzq&sig=Ehiru1qnJ6FzEsQfsogrRZb0ego",
            "11744326115041038702",
            "\/scholar?cites=11744326115041038702",
            {
                "2003":7,
                "2004":18,
                "2005":19,
                "2006":24,
                "2007":23,
                "2008":17,
                "2009":26,
                "2010":37,
                "2011":24,
                "2012":21,
                "2013":24,
                "2014":26,
                "2015":21,
                "2016":21,
                "2017":11,
                "2018":14,
                "2019":11,
                "2020":9,
                "2021":1
            }
        ],
        [
            "Compression reduces both the size of indexes and the time needed to evaluate queries. In this paper, we revisit the compression of inverted lists of document postings that store the position and frequency of indexed terms, considering two approaches to improving retrieval efficiency: better implementation and better choice of integer compression schemes. First, we propose several simple optimisations to well-known integer compression schemes, and show experimentally that these lead to significant reductions in time. Second, we explore the impact of choice of compression scheme on retrieval efficiency. In experiments on large collections of data, we show two surprising results: use of simple byte-aligned codes halves the query evaluation time compared to the most compact Golomb-Rice bitwise compression schemes; and, even when an index fits entirely in memory, byte-aligned codes result in faster query \u2026",
            "Compression of inverted indexes for fast query evaluation",
            "Falk Scholer and Hugh E Williams and John Yiannis and Justin Zobel",
            "2002",
            "WcW-GYsAAAAJ:u5HHmVD_uO8C",
            351,
            "https:\/\/dl.acm.org\/doi\/abs\/10.1145\/564376.564416",
            "16084224205622827140",
            "\/scholar?cites=16084224205622827140",
            {
                "2002":1,
                "2003":18,
                "2004":16,
                "2005":18,
                "2006":31,
                "2007":21,
                "2008":23,
                "2009":24,
                "2010":23,
                "2011":20,
                "2012":32,
                "2013":24,
                "2014":19,
                "2015":18,
                "2016":14,
                "2017":17,
                "2018":10,
                "2019":10,
                "2020":6,
                "2021":1
            }
        ],
        [
            "Fast access to files of integers is crucial for the efficient resolution of queries to databases. Integers are the basis of indexes used to resolve queries, for example, in large internet search systems, and numeric data forms a large part of most databases. Disk access costs can be reduced by compression, if the cost of retrieving a compressed representation from disk and the CPU cost of decoding such a representation is less than that of retrieving uncompressed data. In this paper we show experimentally that, for large or small collections, storing integers in a compressed format reduces the time required for either sequential stream access or random access. We compare different approaches to compressing integers, including the Elias gamma and delta codes, Golomb coding, and a variable-byte integer scheme. As a conclusion, we recommend that, for fast access to integers, files be stored compressed.",
            "Compressing integers for fast file access",
            "Hugh E Williams and Justin Zobel",
            "1999",
            "WcW-GYsAAAAJ:u-x6o8ySG0sC",
            297,
            "https:\/\/academic.oup.com\/comjnl\/article-abstract\/42\/3\/193\/336407",
            "7321190887334146386",
            "\/scholar?cites=7321190887334146386",
            {
                "1999":2,
                "2000":3,
                "2001":7,
                "2002":9,
                "2003":13,
                "2004":11,
                "2005":9,
                "2006":15,
                "2007":18,
                "2008":11,
                "2009":8,
                "2010":17,
                "2011":13,
                "2012":20,
                "2013":17,
                "2014":17,
                "2015":19,
                "2016":15,
                "2017":28,
                "2018":16,
                "2019":10,
                "2020":15
            }
        ],
        [
            "Stemming words to (usually) remove suffixes has applications in text search, machine translation, document summarization, and text classification. For example, English stemming reduces the words \"computer,\" \"computing,\" \"computation,\" and \"computability\" to their common morphological root, \"comput-.\" In text search, this permits a search for \"computers\" to find documents containing all words with the stem \"comput-.\" In the Indonesian language, stemming is of crucial importance: words have prefixes, suffixes, infixes, and confixes that make matching related words difficult.This work surveys existing techniques for stemming Indonesian words to their morphological roots, presents our novel and highly accurate CS algorithm, and explores the effectiveness of stemming in the context of general-purpose text information retrieval through ad hoc queries.",
            "Stemming Indonesian: A confix-stripping approach",
            "Mirna Adriani and Jelita Asian and Bobby Nazief and Seyed MM Tahaghoghi and Hugh E Williams",
            "2007",
            "WcW-GYsAAAAJ:W7OEmFMy1HYC",
            211,
            "https:\/\/dl.acm.org\/doi\/abs\/10.1145\/1316457.1316459",
            "13644335598972671274",
            "\/scholar?cites=13644335598972671274",
            {
                "2008":4,
                "2009":5,
                "2010":4,
                "2011":8,
                "2012":8,
                "2013":8,
                "2014":6,
                "2015":10,
                "2016":12,
                "2017":23,
                "2018":38,
                "2019":51,
                "2020":33,
                "2021":1
            }
        ],
        [
            "Many applications depend on efficient management of large sets of distinct strings in memory. For example, during index construction for text databases a record is held for each distinct word in the text, containing the word itself and information such as counters. We propose a new data structure, the burst trie, that has significant advantages over existing options for such applications: it uses about the same memory as a binary search tree; it is as fast as a trie; and, while not as fast as a hash table, a burst trie maintains the strings in sorted or near-sorted order. In this paper we describe burst tries and explore the parameters that govern their performance. We experimentally determine good choices of parameters, and compare burst tries to other structures used for the same task, with a variety of data sets. These experiments show that the burst trie is particularly effective for the skewed frequency distributions common in \u2026",
            "Burst tries: a fast, efficient data structure for string keys",
            "Steffen Heinz and Justin Zobel and Hugh E Williams",
            "2002",
            "WcW-GYsAAAAJ:2osOgNQ5qMEC",
            205,
            "https:\/\/dl.acm.org\/doi\/abs\/10.1145\/506309.506312",
            "13730926352305600228",
            "\/scholar?cites=13730926352305600228",
            {
                "2002":1,
                "2003":2,
                "2004":11,
                "2005":10,
                "2006":4,
                "2007":6,
                "2008":8,
                "2009":9,
                "2010":17,
                "2011":15,
                "2012":13,
                "2013":15,
                "2014":16,
                "2015":9,
                "2016":10,
                "2017":6,
                "2018":15,
                "2019":17,
                "2020":18,
                "2021":1
            }
        ],
        [
            "The presentation of query biased document snippets as part of results pages presented by search engines has become an expectation of search engine users. In this paper we explore the algorithms and data structures required as part of a search engine to allow efficient generation of query biased snippets. We begin by proposing and analysing a document compression method that reduces snippet generation time by 58% over a baseline using the zlib compression library. These experiments reveal that finding documents on secondary storage dominates the total cost of generating snippets, and so caching documents in RAM is essential for a fast snippet generation process. Using simulation, we examine snippet generation performance for different size RAM caches. Finally we propose and analyse document reordering and compaction, revealing a scheme that increases the number of document cache hits with \u2026",
            "Fast generation of result snippets in web search",
            "Andrew Turpin and Yohannes Tsegay and David Hawking and Hugh E Williams",
            "2007",
            "WcW-GYsAAAAJ:d1gkVwhDpl0C",
            189,
            "https:\/\/dl.acm.org\/doi\/abs\/10.1145\/1277741.1277766",
            "3519832698501422991",
            "\/scholar?cites=3519832698501422991",
            {
                "2007":2,
                "2008":20,
                "2009":14,
                "2010":9,
                "2011":20,
                "2012":23,
                "2013":21,
                "2014":9,
                "2015":20,
                "2016":7,
                "2017":10,
                "2018":14,
                "2019":11,
                "2020":7
            }
        ],
        [
            "Hundreds of millions of users each day use web search engines to meet their information needs. Advances in web search effectiveness are therefore perhaps the most significant public outcomes of IR research. Query expansion is one such method for improving the effectiveness of ranked retrieval by adding additional terms to a query. In previous approaches to query expansion, the additional terms are selected from highly ranked documents returned from an initial retrieval run. We propose a new method of obtaining expansion terms, based on selecting terms from past user queries that are associated with documents in the collection. Our scheme is effective for query expansion for web retrieval: our results show relative improvements over unexpanded full text retrieval of 26%--29%, and 18%--20% over an optimised, conventional expansion approach.",
            "Query expansion using associated queries",
            "Bodo Billerbeck and Falk Scholer and Hugh E Williams and Justin Zobel",
            "2003",
            "WcW-GYsAAAAJ:9yKSN-GCB0IC",
            167,
            "https:\/\/dl.acm.org\/doi\/abs\/10.1145\/956863.956866",
            "11514099432070584670",
            "\/scholar?cites=11514099432070584670",
            {
                "2002":1,
                "2003":3,
                "2004":13,
                "2005":10,
                "2006":17,
                "2007":19,
                "2008":20,
                "2009":15,
                "2010":9,
                "2011":11,
                "2012":6,
                "2013":7,
                "2014":10,
                "2015":8,
                "2016":2,
                "2017":6,
                "2018":8,
                "2019":2
            }
        ],
        [
            "Genomic sequence databases are widely used by molecular biologists for homology searching. Amino acid and nucleotide databases are increasing in size exponentially, and mean sequence lengths are also increasing. In searching such databases, it is desirable to use heuristics to perform computationally intensive local alignments on selected sequences and to reduce the costs of the alignments that are attempted. We present an index-based approach for both selecting sequences that display broad similarity to a query and for fast local alignment. We show experimentally that the indexed approach results in significant savings in computationally intensive local alignments and that index-based searching is as accurate as existing exhaustive search schemes.",
            "Indexing and retrieval for genomic databases",
            "Hugh E Williams and Justin Zobel",
            "2002",
            "WcW-GYsAAAAJ:qjMakFHDy7sC",
            150,
            "https:\/\/ieeexplore.ieee.org\/abstract\/document\/979973\/",
            "12671856940983290999",
            "\/scholar?cites=12671856940983290999",
            {
                "2001":1,
                "2002":3,
                "2003":18,
                "2004":21,
                "2005":14,
                "2006":17,
                "2007":11,
                "2008":12,
                "2009":9,
                "2010":7,
                "2011":8,
                "2012":2,
                "2013":5,
                "2014":2,
                "2015":2,
                "2016":6,
                "2017":1,
                "2018":2,
                "2019":3
            }
        ],
        [
            "Search engines need to evaluate queries extremely fast, a challenging task given the quantities of data being indexed. A significant proportion of the queries posed to search engines involve phrases. In this article we consider how phrase queries can be efficiently supported with low disk overheads. Our previous research has shown that phrase queries can be rapidly evaluated using nextword indexes, but these indexes are twice as large as conventional inverted files. Alternatively, special-purpose phrase indexes can be used, but it is not feasible to index all phrases. We propose combinations of nextword indexes and phrase indexes with inverted files as a solution to this problem. Our experiments show that combined use of a partial nextword, partial phrase, and conventional inverted index allows evaluation of phrase queries in a quarter the time required to evaluate such queries with an inverted file alone; the \u2026",
            "Fast phrase querying with combined indexes",
            "Hugh E Williams and Justin Zobel and Dirk Bahle",
            "2004",
            "WcW-GYsAAAAJ:zYLM7Y9cAGgC",
            133,
            "https:\/\/dl.acm.org\/doi\/abs\/10.1145\/1028099.1028102",
            "2546801095603330894",
            "\/scholar?cites=2546801095603330894",
            {
                "2005":3,
                "2006":8,
                "2007":14,
                "2008":15,
                "2009":10,
                "2010":7,
                "2011":12,
                "2012":9,
                "2013":6,
                "2014":12,
                "2015":2,
                "2016":7,
                "2017":4,
                "2018":9,
                "2019":7,
                "2020":4,
                "2021":1
            }
        ],
        [
            "Homology search is a key tool for understanding the role, structure, and biochemical function of genomic sequences. The most popular technique for rapid homology search is BLAST, which has been in widespread use within universities, research centers, and commercial enterprises since the early 1990s. We propose a new step in the BLAST algorithm to reduce the computational cost of searching with negligible effect on accuracy. This new step - semigapped alignment - compromises between the efficiency of ungapped alignment and the accuracy of gapped alignment, allowing BLAST to accurately filter sequences with lower computational cost. In addition, we propose a heuristic - restricted insertion alignment - that avoids unlikely evolutionary paths with the aim of reducing gapped alignment cost with negligible effect on accuracy. Together, after including an optimization of the local alignment recursion, our \u2026",
            "Improved gapped alignment in BLAST",
            "Michael Cameron and Hugh E Williams and Adam Cannane",
            "2004",
            "WcW-GYsAAAAJ:IjCSPb-OGe4C",
            122,
            "https:\/\/ieeexplore.ieee.org\/abstract\/document\/1377140\/",
            "5386667859728554080",
            "\/scholar?cites=5386667859728554080",
            {
                "2004":1,
                "2005":4,
                "2006":13,
                "2007":7,
                "2008":16,
                "2009":4,
                "2010":11,
                "2011":3,
                "2012":8,
                "2013":7,
                "2014":3,
                "2015":14,
                "2016":7,
                "2017":8,
                "2018":6,
                "2019":5,
                "2020":4
            }
        ]
    ]
}